import { Project, ProjectDetails, MemberOf } from "@show-karma/karma-gap-sdk";
import gap from "../gap-client";
import { opEVM, opPublicClient } from "../ethereum";
import { signWithAgent } from "@neardefi/shade-agent-js";
import { utils } from "chainsig.js";
const { toRSV } = utils.cryptography;

const karmaAddress = "0xC891F8eBA218f5034bf3a472528408BE19E1130E";
const rawData =
  "0x5913a31c000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000f9bbd118dd100459a7d093403af21c6e7f847fd7f331b7a4e6bfb94a1366bd760000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000429a2da7884ca14e53142988d5845952fe4df6a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000d193e75f420a69910f98fa79cacdfd9d0dcbf5933edce8f8bde9a10bd204d9960000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000429a2da7884ca14e53142988d5845952fe4df6a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000807b227469746c65223a2254657374222c226465736372697074696f6e223a2254657374222c22696d61676555524c223a2268747470733a2f2f7669612e706c616365686f6c6465722e636f6d2f313530222c226c696e6b73223a5b5d2c2274616773223a5b5d2c2274797065223a2270726f6a6563742d64657461696c73227d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000611f9655188f372e27dce116a803fa9081ca3e2907986368d54fcad538ca38530000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000429a2da7884ca14e53142988d5845952fe4df6a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001";

export async function registerProject({
  title,
  description,
  imageURL,
  creators,
  links = [],
  tags = [],
  chainID = 420,
}) {
  // Create project
  const project = new Project({
    data: { project: true },
    chainID,
    schema: gap.findSchema("Project"),
    recipient: creators[0].address,
  });

  // Add project details
  project.details = new ProjectDetails({
    data: {
      title,
      description,
      imageURL,
      links,
      tags,
    },
    schema: gap.findSchema("ProjectDetails"),
    recipient: project.recipient,
  });

  // Add members
  creators.forEach((creator) => {
    const member = new MemberOf({
      data: { memberOf: true },
      schema: gap.findSchema("MemberOf"),
      refUID: project.uid,
      recipient: creator.address,
    });
    project.members.push(member);
  });

  const contractId = process.env.NEXT_PUBLIC_contractId;

  const { address: senderAddress } = await opEVM.deriveAddressAndPublicKey(
    contractId,
    "ethereum-1"
  );

  const { transaction, hashesToSign } =
    await opEVM.prepareTransactionForSigning({
      from: senderAddress,
      to: karmaAddress,
      data: rawData,
    });

  let signRes;
  let verified = false;
  // Call the agent contract to get a signature for the payload
  try {
    const path = "ethereum-1";
    const payload = hashesToSign[0];
    signRes = await signWithAgent(path, payload);
    console.log("signRes", signRes);
    verified = true;
  } catch (e) {
    console.log("Contract call error:", e);
  }

  if (!verified) {
    res.status(400).json({
      verified,
      error: "Failed to get signature verification from MPC nodes",
    });
    return;
  }

  // Reconstruct the signed transaction
  const signedTransaction = opEVM.finalizeTransactionSigning({
    transaction,
    rsvSignatures: [toRSV(signRes)],
  });

  // Broadcast the signed transaction
  const { hash: txHash } = await opEVM.broadcastTx(signedTransaction);

  console.log("TxHash ", txHash);

  const receipt = await opPublicClient.waitForTransactionReceipt({
    hash: txHash,
  });

  return { txHash };
}
